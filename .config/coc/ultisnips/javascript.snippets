# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# snippet mya
# <a href="$1"${2: class="${3:link}"}>
#     $0
# </a>
# endsnippet

snippet clogg
console.log("${1}")
endsnippet

snippet clog
console.log("${1:name}", $1)
endsnippet

snippet cwarn
console.log("${1:name}", $1)
endsnippet

snippet napi "new api" b
export const $1 = ($2) => {
  return ${3:main}.${4:get}(\`$5\`,$6)
}
endsnippet

snippet napif "new api" b
export function $1($2) {
	return ${3:main}.${4:get}(\`$5\`,$6)
}

endsnippet
snippet np-model "nd-model.js" b
import durex from '@gem-mine/durex'
import baseRequest from '@gem-mine/request'
// import * as api from '@/api'

/**
 * this.getState()获取当前namespace下的state
 */

const { main } = baseRequest

durex.model({
  name: '$1',
  state: {},
  reducers: {
  },
  effects: {
    // async demo(params) {
    //   const res = await api.getDemo(params)
    //   this.setField({
		//      res
    //   })
    // }
  }
})
endsnippet
